---
import LanguagePicker from './LanguagePicker.astro';
import { getLangFromUrl, useTranslations } from '../i18n/ui';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<header class="header">
  <div class="container">
    <div class="logo">
      <a href={lang === 'he' ? '/' : `/${lang}/`} class="logo-link" title={t('hero.title')} aria-label={t('hero.title')}>
        <img src="/images/logo.jpg" alt={t('hero.title')} class="logo-image" width="auto" height="50" />
      </a>
    </div>
    
    <nav class="main-nav">
      <button class="mobile-menu-toggle" aria-label="Toggle menu">
        <span></span>
        <span></span>
        <span></span>
      </button>
      
      <ul class="nav-links">
        <li class="nav-item">
          <a href={lang === 'he' ? '/' : `/${lang}/`} class="nav-link" title={t('nav.home')} aria-label={t('nav.home')}>
            {t('nav.home')}
          </a>
        </li>
        <li class="nav-item">
          <a href={`${lang === 'he' ? '/' : `/${lang}/`}#services-anchor`} class="nav-link" title={t('services.title')} aria-label={t('services.title')}>
            {t('nav.services')}
          </a>
        </li>
        <li class="nav-item">
          <a href={`${lang === 'he' ? '/' : `/${lang}/`}#team-anchor`} class="nav-link" title={t('team.title')} aria-label={t('team.title')}>
            {t('nav.team')}
          </a>
        </li>
        <li class="nav-item">
          <a href={`${lang === 'he' ? '/' : `/${lang}/`}#contact-anchor`} class="nav-link" title={t('contact.title')} aria-label={t('contact.title')}>
            {t('nav.contact')}
          </a>
        </li>
        <li class="nav-item language-picker-container">
          <LanguagePicker />
        </li>
      </ul>
    </nav>
  </div>
</header>

<style>
  .header {
    background-color: var(--color-background);
    box-shadow: var(--shadow-md);
    position: fixed;
    width: 100%;
    top: 0;
    left: 0;
    z-index: 100;
    height: 80px;
    display: flex;
    align-items: center;
    transition: all var(--transition-normal);
  }

  .header.scrolled {
    height: 70px;
    background-color: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
  }

  .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 100%;
  }

  .logo {
    display: flex;
    align-items: center;
  }

  .logo-link {
    display: flex;
    align-items: center;
    text-decoration: none;
    transition: transform var(--transition-normal);
  }

  .logo-link:hover {
    transform: scale(1.02);
  }
  
  .logo-image {
    height: 50px;
    width: auto;
    transition: all var(--transition-normal);
  }
  
  .header.scrolled .logo-image {
    height: 45px;
  }
  
  /* Removed logo flipping for RTL to maintain original logo orientation */
  /*.rtl .logo-image {
    transform: scaleX(-1);
  }*/

  .main-nav {
    display: flex;
    align-items: center;
  }

  .nav-links {
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0;
    gap: 2rem;
    align-items: center;
  }

  .nav-item {
    position: relative;
  }

  .nav-link {
    text-decoration: none;
    color: var(--color-text);
    font-weight: 500;
    transition: color var(--transition-normal);
    padding: 0.5rem 0;
    position: relative;
  }

  .nav-link::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: 0;
    left: 0;
    background-color: var(--color-accent);
    transition: width var(--transition-normal);
  }

  .rtl .nav-link::after {
    left: auto;
    right: 0;
  }

  .nav-link:hover,
  .nav-link:focus {
    color: var(--color-accent);
  }

  .nav-link:hover::after,
  .nav-link:focus::after {
    width: 100%;
  }

  .mobile-menu-toggle {
    display: none;
    flex-direction: column;
    gap: 5px;
    cursor: pointer;
    background: transparent;
    border: none;
    padding: 10px;
  }

  .mobile-menu-toggle span {
    width: 25px;
    height: 3px;
    background-color: var(--color-primary);
    border-radius: 1px;
    transition: all var(--transition-normal);
  }

  @media (max-width: 768px) {
    .header {
      height: 70px;
    }

    .mobile-menu-toggle {
      display: flex;
      z-index: 101;
    }

    .mobile-menu-toggle.active span:nth-child(1) {
      transform: translateY(8px) rotate(45deg);
    }

    .mobile-menu-toggle.active span:nth-child(2) {
      opacity: 0;
    }

    .mobile-menu-toggle.active span:nth-child(3) {
      transform: translateY(-8px) rotate(-45deg);
    }

    .nav-links {
      position: fixed;
      top: 0;
      right: -100%;
      flex-direction: column;
      background-color: var(--color-background);
      width: 80%;
      height: 100vh;
      padding: 5rem 2rem 2rem;
      transition: right var(--transition-normal);
      box-shadow: var(--shadow-lg);
      z-index: 100;
      justify-content: flex-start;
      gap: 1.5rem;
    }

    .rtl .nav-links {
      right: auto;
      left: -100%;
      transition: left var(--transition-normal);
    }

    .nav-links.active {
      right: 0;
    }
    
    .rtl .nav-links.active {
      left: 0;
      right: auto;
    }

    .nav-item {
      width: 100%;
    }

    .nav-link {
      display: block;
      padding: 0.8rem 0;
      width: 100%;
      border-bottom: 1px solid var(--color-border);
    }

    .language-picker-container {
      margin-top: 1rem;
    }
  }
</style>

<script>
  // Toggle mobile menu
  const menuToggle = document.querySelector('.mobile-menu-toggle');
  const navLinks = document.querySelector('.nav-links');
  const header = document.querySelector('.header');

  if (menuToggle && navLinks) {
    menuToggle.addEventListener('click', () => {
      navLinks.classList.toggle('active');
      menuToggle.classList.toggle('active');
    });
  }

  // Close menu when clicking on a link
  const links = document.querySelectorAll('.nav-links a');
  links.forEach(link => {
    link.addEventListener('click', () => {
      navLinks?.classList.remove('active');
      menuToggle?.classList.remove('active');
    });
  });

  // Header scroll effect
  window.addEventListener('scroll', () => {
    if (window.scrollY > 50) {
      header?.classList.add('scrolled');
    } else {
      header?.classList.remove('scrolled');
    }
  });
</script>
